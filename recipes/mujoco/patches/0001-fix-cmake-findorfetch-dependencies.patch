diff --git a/cmake/MujocoDependencies.cmake b/cmake/MujocoDependencies.cmake
index d919b6e..fa90b53 100644
--- a/cmake/MujocoDependencies.cmake
+++ b/cmake/MujocoDependencies.cmake
@@ -79,25 +79,27 @@ set(BUILD_SHARED_LIBS
     CACHE INTERNAL "Build SHARED libraries"
 )
 
-if(NOT TARGET lodepng)
-  FetchContent_Declare(
-    lodepng
-    GIT_REPOSITORY https://github.com/lvandeve/lodepng.git
-    GIT_TAG ${MUJOCO_DEP_VERSION_lodepng}
-  )
+# if(NOT TARGET lodepng)
+#   FetchContent_Declare(
+#     lodepng
+#     GIT_REPOSITORY https://github.com/lvandeve/lodepng.git
+#     GIT_TAG ${MUJOCO_DEP_VERSION_lodepng}
+#   )
 
-  FetchContent_GetProperties(lodepng)
-  if(NOT lodepng_POPULATED)
-    FetchContent_Populate(lodepng)
-    # This is not a CMake project.
-    set(LODEPNG_SRCS ${lodepng_SOURCE_DIR}/lodepng.cpp)
-    set(LODEPNG_HEADERS ${lodepng_SOURCE_DIR}/lodepng.h)
-    add_library(lodepng STATIC ${LODEPNG_HEADERS} ${LODEPNG_SRCS})
-    target_compile_options(lodepng PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
-    target_link_options(lodepng PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
-    target_include_directories(lodepng PUBLIC ${lodepng_SOURCE_DIR})
-  endif()
-endif()
+#   FetchContent_GetProperties(lodepng)
+#   if(NOT lodepng_POPULATED)
+#     FetchContent_Populate(lodepng)
+#     # This is not a CMake project.
+#     set(LODEPNG_SRCS ${lodepng_SOURCE_DIR}/lodepng.cpp)
+#     set(LODEPNG_HEADERS ${lodepng_SOURCE_DIR}/lodepng.h)
+#     add_library(lodepng STATIC ${LODEPNG_HEADERS} ${LODEPNG_SRCS})
+#     target_compile_options(lodepng PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
+#     target_link_options(lodepng PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
+#     target_include_directories(lodepng PUBLIC ${lodepng_SOURCE_DIR})
+#   endif()
+# endif()
+
+find_package(lodepng REQUIRED)
 
 # TODO(fraromano) We fetch qhull before the other libraries as it needs to go before until https://github.com/qhull/qhull/pull/111 is merged.
 set(QHULL_ENABLE_TESTING OFF)
@@ -106,7 +108,7 @@ find_package(Git REQUIRED)
 
 findorfetch(
   USE_SYSTEM_PACKAGE
-  OFF
+  ON
   PACKAGE_NAME
   qhull
   LIBRARY_NAME
@@ -132,16 +134,16 @@ findorfetch(
 )
 # MuJoCo includes a file from libqhull_r which is not exported by the qhull include directories.
 # Add it to the target.
-target_include_directories(
-  qhullstatic_r INTERFACE $<BUILD_INTERFACE:${qhull_SOURCE_DIR}/src/libqhull_r>
-)
-target_compile_options(qhullstatic_r PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
-target_link_options(qhullstatic_r PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
+# target_include_directories(
+#   qhullstatic_r INTERFACE $<BUILD_INTERFACE:${qhull_SOURCE_DIR}/src/libqhull_r>
+# )
+# target_compile_options(qhullstatic_r PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
+# target_link_options(qhullstatic_r PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
 
 set(tinyxml2_BUILD_TESTING OFF)
 findorfetch(
   USE_SYSTEM_PACKAGE
-  OFF
+  ON
   PACKAGE_NAME
   tinyxml2
   LIBRARY_NAME
@@ -154,12 +156,12 @@ findorfetch(
   tinyxml2
   EXCLUDE_FROM_ALL
 )
-target_compile_options(tinyxml2 PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
-target_link_options(tinyxml2 PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
+# target_compile_options(tinyxml2 PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
+# target_link_options(tinyxml2 PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
 
 findorfetch(
   USE_SYSTEM_PACKAGE
-  OFF
+  ON
   PACKAGE_NAME
   tinyobjloader
   LIBRARY_NAME
@@ -177,7 +179,7 @@ set(ENABLE_DOUBLE_PRECISION ON)
 set(CCD_HIDE_ALL_SYMBOLS ON)
 findorfetch(
   USE_SYSTEM_PACKAGE
-  OFF
+  ON
   PACKAGE_NAME
   ccd
   LIBRARY_NAME
@@ -190,19 +192,19 @@ findorfetch(
   ccd
   EXCLUDE_FROM_ALL
 )
-target_compile_options(ccd PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
-target_link_options(ccd PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
+# target_compile_options(ccd PRIVATE ${MUJOCO_MACOS_COMPILE_OPTIONS})
+# target_link_options(ccd PRIVATE ${MUJOCO_MACOS_LINK_OPTIONS})
 
 # libCCD has an unconditional `#define _CRT_SECURE_NO_WARNINGS` on Windows.
 # TODO(stunya): Remove this after https://github.com/danfis/libccd/pull/77 is merged.
-if(WIN32)
-  if(MSVC)
-    # C4005 is the MSVC equivalent of -Wmacro-redefined.
-    target_compile_options(ccd PRIVATE /wd4005)
-  else()
-    target_compile_options(ccd PRIVATE -Wno-macro-redefined)
-  endif()
-endif()
+# if(WIN32)
+#   if(MSVC)
+#     # C4005 is the MSVC equivalent of -Wmacro-redefined.
+#     target_compile_options(ccd PRIVATE /wd4005)
+#   else()
+#     target_compile_options(ccd PRIVATE -Wno-macro-redefined)
+#   endif()
+# endif()
 
 if(MUJOCO_BUILD_TESTS)
   set(ABSL_PROPAGATE_CXX_STD ON)
@@ -217,7 +219,7 @@ if(MUJOCO_BUILD_TESTS)
   set(ABSL_BUILD_TESTING OFF)
   findorfetch(
     USE_SYSTEM_PACKAGE
-    OFF
+    ON
     PACKAGE_NAME
     absl
     LIBRARY_NAME
@@ -244,7 +246,7 @@ if(MUJOCO_BUILD_TESTS)
 
   findorfetch(
     USE_SYSTEM_PACKAGE
-    OFF
+    ON
     PACKAGE_NAME
     GTest
     LIBRARY_NAME
@@ -278,7 +280,7 @@ if(MUJOCO_BUILD_TESTS)
 
   findorfetch(
     USE_SYSTEM_PACKAGE
-    OFF
+    ON
     PACKAGE_NAME
     benchmark
     LIBRARY_NAME
